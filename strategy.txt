# AI Stock Trading Strategy Framework

## I. Core Strategy Rules

### 1. Entry Conditions
```python
# Primary Entry Rules
entry_conditions = {
    "price_close": "near_extremes",  # Top 10% or bottom 10% of range
    "consolidation": {
        "range": "small",  # Recent price range < 20-day average range
        "duration": "3-5 days"
    },
    "volume": {
        "confirmation": True,  # Volume > 20-day average volume
        "trend": "increasing"  # 3-day volume trend
    },
    "cycle_timing": {
        "short_term": "7-20 days",
        "medium_term": "20-60 days",
        "alignment": "bullish"  # Both cycles in upward phase
    }
}

# Technical Confirmations
technical_signals = {
    "support_resistance": {
        "break_threshold": "1%",
        "volume_requirement": "1.5x average"
    },
    "momentum": {
        "divergence": "positive",  # Price making lows but momentum rising
        "strength": "increasing"
    },
    "accumulation": {
        "institutional_buying": True,
        "volume_price_alignment": True
    }
}
```

### 2. Exit Rules
```python
exit_conditions = {
    "HTTC_rules": {
        "large_range_day": True,  # Daily range > 1.5x average
        "trend_direction": "maintained",
        "profit_target": "none"  # Let winners run
    },
    "technical_exits": {
        "support_breach": "2 consecutive closes",
        "cycle_completion": "top/bottom confirmed",
        "volume_climax": "3x average volume"
    },
    "stop_loss": {
        "initial": "2% from entry",
        "trailing": "highest high - 1.5%",
        "time_based": "5 days without new high"
    }
}
```

### 3. Position Sizing
```python
def calculate_position_size(account_value, risk_per_trade, entry, stop_loss):
    """
    Position sizing calculator
    """
    risk_amount = account_value * risk_per_trade
    per_share_risk = abs(entry - stop_loss)
    position_size = risk_amount / per_share_risk
    
    # Position limits
    max_position = account_value * 0.02  # 2% max position
    return min(position_size, max_position)

position_management = {
    "initial_risk": 0.01,  # 1% account risk
    "max_position": 0.02,  # 2% of account
    "scaling": {
        "increment": 0.33,  # Add 1/3 to winners
        "profit_trigger": 0.02  # Scale after 2% gain
    }
}
```

### 4. Timing Windows
```python
optimal_trading_windows = {
    "morning_session": {
        "start": "market_open",
        "duration": "60 minutes",
        "volume_threshold": "1.2x average"
    },
    "closing_session": {
        "start": "60_min_before_close",
        "duration": "60 minutes",
        "volume_threshold": "1.5x average"
    },
    "economic_releases": {
        "wait_period": "15 minutes",
        "volatility_threshold": "2x normal"
    }
}
```

### 5. Technical Analysis
```python
technical_indicators = {
    "trend": {
        "moving_averages": [20, 50, 200],
        "price_action": ["higher_highs", "higher_lows"],
        "timeframes": ["daily", "weekly", "monthly"]
    },
    "momentum": {
        "rsi": {"period": 14, "thresholds": [30, 70]},
        "macd": {"fast": 12, "slow": 26, "signal": 9}
    },
    "volume": {
        "on_balance_volume": True,
        "volume_price_trend": True,
        "accumulation_distribution": True
    },
    "cycles": {
        "short_term": {"period": "7-20", "weight": 0.5},
        "medium_term": {"period": "20-60", "weight": 0.3},
        "long_term": {"period": "60+", "weight": 0.2}
    }
}
```

### 6. Performance Metrics
```python
performance_requirements = {
    "minimum_metrics": {
        "profit_factor": 1.5,
        "win_rate": 0.40,
        "win_loss_ratio": 2.0,
        "max_drawdown": 0.15
    },
    "position_metrics": {
        "avg_holding_period": "3-30 days",
        "avg_profit_per_trade": ">0.5%",
        "max_consecutive_losses": 5
    }
}
```

### 7. Risk Controls
```python
risk_management = {
    "portfolio_limits": {
        "max_open_positions": 5,
        "sector_exposure": 0.20,
        "cash_reserve": 0.20,
        "total_risk": 0.06
    },
    "stop_types": {
        "initial": "fixed_percent",
        "trailing": "volatility_based",
        "time": "cycle_based",
        "break_even": "after_1R_profit"
    }
}
```

## Implementation Notes
1. All entries must meet minimum 3 confirmation signals
2. Exits must be mechanical, not discretionary
3. Position sizing strictly based on risk calculation
4. All decisions must be based on quantifiable metrics
5. System should adapt to volatility changes
6. Regular performance monitoring required
7. Risk management rules are absolute
